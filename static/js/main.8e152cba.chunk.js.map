{"version":3,"sources":["components/style/theme.js","components/common/Button.jsx","components/TextEditor.jsx","components/style/border.js","components/Terminal.jsx","services/LanguageConstants.js","services/LanguageService.js","components/style/GlobalStyle.jsx","components/SvgView.jsx","components/tutorial/tutorialContent.js","components/tutorial/Tutorial.jsx","App.js","serviceWorker.js","index.js"],"names":["primaryColor","Button","styled","button","options","theme","autoCloseBrackets","cursorScrollMargin","mode","lineNumbers","indentUnit","tabSize","styleActiveLine","viewportMargin","height","HeaderTitle","h1","HeaderContainer","div","Theme","EditorHeader","props","container","alignItems","justify","item","style","marginLeft","marginRight","marginTop","onClick","e","preventDefault","execute","TextEditor","React","setRenderer","setCode","content","setContent","run","setConsoleContent","isSuccess","error","console","log","message","spacing","xs","name","value","onBeforeChange","editor","data","border","TerminalContainer","success","Terminal","Fragment","split","map","line","replace","SHAPE_TYPE","SHAPE_FORMS","COLORS","simpleColor","color","type","simpleShape","form","combinedShape","shapes","flatMap","shape","skipSpace","string","first","search","slice","parseExpression","program","match","expr","exec","Number","SyntaxError","parseApply","rest","operator","args","arg","push","length","specialForms","Object","create","evaluate","scope","ReferenceError","op","TypeError","Ejecutar","Definir","Colorear","cloneDeep","s","colorize","Combinar","shape1","shape2","combine","topScope","Blanco","Negro","Rojo","Verde","Azul","Circulo","Cuadrado","Triangulo","LanguageService","Dibujar","parse","GlobalStyle","createGlobalStyle","StyledSVG","svg","getColor","renderShape","index","tilesAmount","grid","position","y","minY","Math","floor","maxY","x","minX","maxX","subGridPosition","shapeWidth","calculateShapeWidth","key","cx","cy","r","fill","points","width","Grid","fullLength","tileSize","sqrt","this","SvgView","code","result","sortShapes","tiles","pow","MAX_X","render","Array","from","keys","shapesAmount","getTilesAmount","renderShapes","viewBox","contenido","ContentContainer","FooterContainer","PageCounter","h3","Tutorial","p","useState","page","setPage","ref","useRef","escapeHtml","source","max","current","scrollTop","margin","min","WindowContainer","App","consoleContent","direction","sm","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8e152cba.chunk.js","sourcesContent":["export const codeColor = \"#99FF\";\r\n\r\nexport const errorColor =\"#FF0000\";\r\n\r\nexport const primaryColor = \"hsl(231, 15%, 10%)\";\r\n\r\nexport const secondaryColor = \"hsl(231, 15%, 13%)\";\r\n","import styled from 'styled-components';\r\nimport * as Theme from '../style/theme';\r\n\r\nconst Button = styled.button`\r\n    background-color: ${Theme.codeColor};\r\n    color: ${Theme.secondaryColor};\r\n    border: solid ${Theme.secondaryColor} 0.1rem;\r\n    align-self: center;\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem 1rem;\r\n    outline: none;\r\n        transition: background-color 0.3s, color 0.2s ease;\r\n    &:hover {\r\n        transform: scale(1.05, 1.05);\r\n    }\r\n    &:active {\r\n        transform: scale(0.95, 0.95);\r\n        background-color: ${Theme.secondaryColor};\r\n        color: ${Theme.codeColor};\r\n        border: solid ${Theme.codeColor} 0.1rem;\r\n        transition: background-color 0s, color 0s ease;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import * as React from \"react\";\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\n\r\n// background: #101010;\r\n// color: #fff;\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\nimport \"codemirror/mode/jsx/jsx\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"./editor.css\";\r\nimport \"./theme.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport styled from \"styled-components\";\r\nimport * as Theme from './style/theme';\r\nimport Button from \"./common/Button\";\r\n\r\nconst options = {\r\n  theme: \"dracula\",\r\n  autoCloseBrackets: true,\r\n  cursorScrollMargin: 48,\r\n  mode: \"jsx\",\r\n  lineNumbers: true,\r\n  indentUnit: 2,\r\n  tabSize: 2,\r\n  styleActiveLine: true,\r\n  viewportMargin: 99,\r\n  height: \"100%\"\r\n};\r\n\r\nconst HeaderTitle = styled.h1`\r\n  font-size: 1.5vmax;\r\n  margin: 0rem;\r\n`;\r\n\r\nconst HeaderContainer = styled.div`\r\n  background-color: ${Theme.codeColor};\r\n  color: ${Theme.primaryColor};\r\n  height: 4vh;\r\n  text-decoration: underline;\r\n`;\r\n\r\nconst EditorHeader = (props)=> {\r\n  return(\r\n    <HeaderContainer>\r\n        <Grid container alignItems={\"center\"} justify={\"space-between\"}>\r\n          <Grid item style={{ marginLeft:\"1rem\"}}>\r\n            <HeaderTitle>Editor</HeaderTitle>\r\n          </Grid>\r\n          <Grid item style={{ marginRight:\"1rem\", marginTop: \"0.2rem\"}}>\r\n            <Button onClick={ e => {\r\n              e.preventDefault();\r\n              props.execute();\r\n            }}>Ejecutar</Button>\r\n          </Grid>\r\n        </Grid>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nconst TextEditor = (props) => {\r\n\r\n    React.useEffect(() =>\r\n      props.setRenderer(props.setCode)\r\n    , []);\r\n    \r\n    const [content, setContent] = React.useState(\r\n`Ejecutar(\r\n  Dibujar(\r\n    Circulo\r\n  )\r\n)\r\n`);\r\n\r\n    const onBeforeChange = (editor, data, value) => {\r\n        setContent(value);\r\n    };\r\n\r\n    const execute = () => {\r\n        try {\r\n          props.run(content);\r\n          props.setConsoleContent(\"Se ejecutó corectamente\");\r\n          props.isSuccess(true);\r\n        } catch(error) {\r\n          console.log(error);\r\n          props.isSuccess(false);\r\n          props.setConsoleContent(error.message);          \r\n        }\r\n    };\r\n\r\n    React.useEffect(() => execute(), []);\r\n\r\n    return (\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={12}>\r\n          <EditorHeader execute={execute}/>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <CodeMirror\r\n              name=\"js\"\r\n              value={content}\r\n              options={options}\r\n              onBeforeChange={onBeforeChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n}\r\n\r\nexport default TextEditor;\r\n","import * as Theme from './theme';\r\n\r\nconst border = `border: 0.1rem solid ${Theme.codeColor};`\r\n\r\nexport default border;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport * as Theme from './style/theme';\r\nimport border from './style/border';\r\n\r\nconst TerminalContainer = styled.div`\r\n    margin: 1.5%;\r\n    width: 94%;\r\n    padding: 1.5%;\r\n    height: 90%;\r\n    background: ${Theme.primaryColor};\r\n    color: ${props => props.success ? \"#00FF00\" : \"#FF0000\"};\r\n    font-family: 'Operator Mono', 'Source Sans Pro', Menlo, Monaco, Consolas,\r\n\t\tCourier New, monospace;\r\n    font-size: 1rem;\r\n    overflow-y: auto;\r\n    ${border};\r\n`;\r\n\r\nconst formatContent = (content) => {\r\n    return <React.Fragment>\r\n            <React.Fragment>{\"> \"}</React.Fragment>\r\n            {(content).split(\"\\n\").map(line =>\r\n                <React.Fragment>{line.replace(\"\\t\", '\\xa0' + '\\xa0')}<br/></React.Fragment>\r\n            )}\r\n        </React.Fragment>\r\n}\r\n\r\nconst Terminal = (props) => {\r\n\r\n    return (\r\n        <TerminalContainer success={props.success}>\r\n            <p>\r\n            {\r\n                props.content === \"{}\" ? \">\" : formatContent(props.content)\r\n            }\r\n            </p>\r\n        </TerminalContainer>\r\n    );\r\n};\r\n\r\nexport default Terminal;\r\n","export const COLOR_TYPE = \"COLOR\";\r\n\r\nexport const SHAPE_TYPE = {\r\n    Simple: \"Simple\",\r\n    Combined: \"Combinada\"\r\n}\r\n\r\nexport const SHAPE_FORMS = {\r\n    Circle: \"Circulo\",\r\n    Triangle: \"Triangulo\",\r\n    Square: \"Cuadrado\"\r\n};\r\n\r\nexport const COLORS = {\r\n    RED: \"Rojo\",\r\n    GREEN: \"Verde\",\r\n    BLUE: \"Azul\",\r\n    WHITE: \"Blanco\",\r\n    BLACK: \"Negro\"\r\n}\r\n","import { COLOR_TYPE, SHAPE_TYPE, SHAPE_FORMS, COLORS } from './LanguageConstants';\r\nimport { cloneDeep, flatMap } from 'lodash';\r\n\r\nconst simpleColor = (color) => {\r\n    return {\r\n        type: COLOR_TYPE,\r\n        color: color\r\n    }\r\n}\r\n\r\nconst simpleShape = (form, color) => {\r\n    return {\r\n        type: SHAPE_TYPE.Simple,\r\n        form: form,\r\n        color: color\r\n    }\r\n}\r\n\r\nconst combinedShape = (shapes) => {\r\n    return {\r\n        type: SHAPE_TYPE.Combined,\r\n        shapes: flatMap(shapes, shape =>\r\n            shape.type === SHAPE_TYPE.Combined ? shape.shapes : [shape]\r\n        )\r\n    }\r\n}\r\n\r\nconst combine = (shape1, shape2) => {\r\n    return combinedShape([shape1, shape2])\r\n}\r\n\r\nconst colorize = (shape, color) => {\r\n    return shape.type === SHAPE_TYPE.Simple ? simpleShape(shape.form, color) : combinedShape(shape.shapes.map(s => simpleShape(s.form, color)))\r\n}\r\n\r\n\r\nfunction skipSpace(string) {\r\n    var first = string.search(/\\S/);\r\n    if (first == -1) return \"\";\r\n    return string.slice(first);\r\n}\r\n\r\nfunction parseApply(expr, program) {\r\n    program = skipSpace(program);\r\n    if (program[0] != \"(\") {\r\n        return {expr: expr, rest: program};\r\n    }\r\n  \r\n    program = skipSpace(program.slice(1));\r\n    expr = {type: \"apply\", operator: expr, args: []};\r\n    while (program[0] != \")\") {\r\n        let arg = parseExpression(program);\r\n        expr.args.push(arg.expr);\r\n        program = skipSpace(arg.rest);\r\n        if (program[0] == \",\") {\r\n        program = skipSpace(program.slice(1));\r\n        } else if (program[0] != \")\") {\r\n        throw new SyntaxError(\"Se esperaba ',' o ')'\");\r\n        }\r\n    }\r\n    return parseApply(expr, program.slice(1));\r\n}\r\n  \r\nfunction parseExpression(program) {\r\n    program = skipSpace(program);\r\n    var match, expr;\r\n    if (match = /^\"([^\"]*)\"/.exec(program))\r\n        expr = {type: \"value\", value: match[1]};\r\n    else if (match = /^\\d+\\b/.exec(program))\r\n        expr = {type: \"value\", value: Number(match[0])};\r\n    else if (match = /^[^\\s(),\"]+/.exec(program))\r\n        expr = {type: \"word\", name: match[0]};\r\n    else\r\n        throw new SyntaxError(\"Sintaxis Inesperada: \" + program);\r\n  \r\n    return parseApply(expr, program.slice(match[0].length));\r\n}\r\n\r\nfunction parse(program) {\r\n    let {expr, rest} = parseExpression(program);\r\n    if (skipSpace(rest).length > 0) {\r\n        parse(rest);\r\n    }\r\n    return expr;\r\n}\r\n  \r\nvar specialForms = Object.create(null);\r\n\r\nfunction evaluate(expr, scope) {\r\n  if (expr.type == \"value\") {\r\n    return expr.value;\r\n  } else if (expr.type == \"word\") {\r\n    if (expr.name in scope) {\r\n      return scope[expr.name];\r\n    } else {\r\n      throw new ReferenceError(\r\n        `Undefined binding: ${expr.name}`);\r\n    }\r\n  } else if (expr.type == \"apply\") {\r\n    let {operator, args} = expr;\r\n    if (operator.type == \"word\" &&\r\n        operator.name in specialForms) {\r\n      return specialForms[operator.name](expr.args, scope);\r\n    } else {\r\n      let op = evaluate(operator, scope);\r\n      if (typeof op == \"function\") {\r\n        return op(...args.map(arg => evaluate(arg, scope)));\r\n      } else {\r\n        throw new TypeError(\"Applying a non-function.\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nspecialForms.Ejecutar = (args, scope) => {\r\n  let value = \"No hay ninguna expresión definida.\";\r\n  for (let arg of args) {\r\n    value = evaluate(arg, scope);\r\n  }\r\n  return value;\r\n};\r\n\r\nspecialForms.Definir = (args, scope) => {\r\n    if (args.length != 2) {\r\n      throw new SyntaxError(\"Definir lleva 2 argumentos.\");\r\n    }\r\n    let value = evaluate(args[1], scope);\r\n    scope[args[0].value] = value;\r\n    console.log(scope[args[0].name]);\r\n    return value;\r\n};\r\n\r\nspecialForms.Colorear = (args, scope) => {\r\n    if (args.length != 2) {\r\n      throw new SyntaxError(\"'Colorear' lleva 2 argumentos.\");\r\n    }\r\n\r\n    let shape = evaluate(args[0], scope);\r\n    console.log(shape);\r\n    if(shape.type !== SHAPE_TYPE.Simple && shape.type !== SHAPE_TYPE.Combined) throw new SyntaxError(\"El primer argumento de 'Colorear' debe ser una forma.\");\r\n    let color = evaluate(args[1], scope);\r\n    if(color.type !== COLOR_TYPE) throw new SyntaxError(\"El segundo argumento de 'Colorear' debe ser un color.\");\r\n    \r\n    const value = cloneDeep(colorize(shape, color))\r\n    return value;\r\n};\r\n\r\nspecialForms.Combinar = (args, scope) => {\r\n    if (args.length != 2) {\r\n      throw new SyntaxError(\"'Combinar' lleva 2 argumentos.\");\r\n    }\r\n    let shape1 = evaluate(args[0], scope);\r\n    let shape2 = evaluate(args[1], scope);\r\n    \r\n    if(shape1.type !== SHAPE_TYPE.Simple && shape1.type !== SHAPE_TYPE.Combined) throw new SyntaxError(\"El primer argumento de 'Combinar' debe ser una forma.\");\r\n    if(shape2.type !== SHAPE_TYPE.Simple && shape2.type !== SHAPE_TYPE.Combined) throw new SyntaxError(\"El segundo argumento de 'Combinar' debe ser una forma.\");\r\n    \r\n    return combine(shape1, shape2);\r\n};\r\n\r\nconst setRenderer = (setCode) => {  \r\n  specialForms.Dibujar = (args, scope) => {\r\n      if (args.length != 1) {\r\n        throw new SyntaxError(\"'Dibujar' solo lleva 1 parámetro\");\r\n      }\r\n      let shape = evaluate(args[0], scope);\r\n      if(shape.type !== SHAPE_TYPE.Simple && shape.type !== SHAPE_TYPE.Combined) {\r\n        throw new SyntaxError(\"'Dibujar' espera 1 parámetro del tipo forma.\");\r\n      }\r\n      let value = evaluate(args[0], scope);\r\n      setCode(value);\r\n      return value;\r\n  };\r\n}\r\n    \r\nvar topScope = Object.create(null);\r\n\r\ntopScope.Blanco     = simpleColor(COLORS.WHITE)\r\ntopScope.Negro      = simpleColor(COLORS.BLACK)\r\ntopScope.Rojo       = simpleColor(COLORS.RED)\r\ntopScope.Verde      = simpleColor(COLORS.GREEN)\r\ntopScope.Azul       = simpleColor(COLORS.BLUE)\r\n\r\ntopScope.Circulo    = simpleShape(SHAPE_FORMS.Circle, topScope.Blanco)\r\ntopScope.Cuadrado   = simpleShape(SHAPE_FORMS.Square, topScope.Blanco)\r\ntopScope.Triangulo  = simpleShape(SHAPE_FORMS.Triangle, topScope.Blanco)\r\n\r\nconst run = (program) => {\r\n  return evaluate(parse(program), Object.create(topScope));\r\n}\r\n\r\nconst LanguageService = {\r\n    setRenderer: setRenderer,\r\n    run: run\r\n};\r\n\r\nexport default LanguageService;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport * as Theme from './theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    body {\r\n        overflow-x: hidden;\r\n        background-color: ${Theme.secondaryColor};\r\n    }\r\n    ::-webkit-scrollbar {\r\n        width: 0.6rem;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: ${Theme.primaryColor};\r\n        border: 0.01rem solid ${Theme.codeColor};\r\n        border-radius: 0.2rem;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: ${Theme.codeColor};\r\n        border-radius: 0.2rem;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { SHAPE_TYPE, SHAPE_FORMS, COLORS } from '../services/LanguageConstants';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport * as Theme from './style/theme';\r\nimport shape from '@material-ui/core/styles/shape';\r\n\r\nconst StyledSVG = styled.svg`\r\n    width: 30vw;\r\n    height: 30vw;\r\n    border: 1px solid ${Theme.codeColor};\r\n    background-color: black;\r\n`;\r\n\r\nconst MIN_X = 0;\r\nconst MIN_Y = 0;\r\nconst MAX_X = 500;\r\nconst MAX_Y = 500;\r\n\r\nconst GRID_SIZE = 50;\r\n\r\nconst RED_COLOR_PROP = \"#FF0000\";\r\nconst GREEN_COLOR_PROP = \"#00FF00\";\r\nconst BLUE_COLOR_PROP = \"#0000FF\";\r\nconst WHITE_COLOR_PROP = \"#FFFFFF\";\r\nconst BLACK_COLOR_PROP = \"#000000\";\r\n\r\nconst getColor = (color) => {\r\n    switch(color.color) {\r\n        case COLORS.GREEN:\r\n            return GREEN_COLOR_PROP;\r\n        case COLORS.BLUE:\r\n            return BLUE_COLOR_PROP;\r\n        case COLORS.RED:\r\n            return RED_COLOR_PROP;\r\n        case COLORS.WHITE:\r\n            return WHITE_COLOR_PROP;\r\n        case COLORS.BLACK:\r\n            return BLACK_COLOR_PROP;\r\n    }\r\n};\r\n\r\nconst sortShapes = (result) => {\r\n    switch(result.type) {\r\n        case SHAPE_TYPE.Simple:\r\n            return [result]\r\n        case SHAPE_TYPE.Combined:\r\n            return result.shapes.map(shape =>shape);\r\n        default:\r\n            return []\r\n    }\r\n};\r\n\r\nconst getTilesAmount = (shapesAmount) => {\r\n    let tilesAmount = 1;\r\n    while(tilesAmount * tilesAmount < shapesAmount) {\r\n        tilesAmount++;\r\n    }\r\n    return tilesAmount;\r\n};\r\n\r\nconst subGridPosition = (index, tilesAmount, grid) => {\r\n    return {\r\n        y: (grid.minY) + Math.floor(index / tilesAmount) * (grid.maxY - grid.minY) / tilesAmount,\r\n        x: (grid.minX) + index % tilesAmount * (grid.maxX  - grid.minX) / tilesAmount\r\n    };\r\n};\r\n\r\nconst calculateShapeWidth = (tilesAmount, grid) => {\r\n    return (grid.maxX - grid.minX) / tilesAmount;\r\n};\r\n\r\nconst renderShapes = (shapes, grid) => {\r\n    \r\n    const tilesAmount = getTilesAmount(shapes.length);\r\n    return (\r\n        <React.Fragment>\r\n            {shapes.map((shape, index) => renderShape(shape, index, tilesAmount, grid))}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\nconst renderShape = (shape, index, tilesAmount, grid) => {\r\n    const position = subGridPosition(index, tilesAmount,  grid);\r\n    const shapeWidth = calculateShapeWidth(tilesAmount, grid);\r\n    switch(shape.form) {\r\n        case SHAPE_FORMS.Circle:\r\n            return <circle key={index} cx={position.x+shapeWidth/2} cy={position.y+shapeWidth/2} r={shapeWidth/2} fill={getColor(shape.color)} />\r\n        case SHAPE_FORMS.Triangle:\r\n            return <polygon\r\n            key={index}\r\n            points={`${position.x+shapeWidth/2},${position.y} ${position.x + shapeWidth},${ position.y + shapeWidth} ${position.x}, ${position.y + shapeWidth}`}\r\n            style={{fill:getColor(shape.color)}} />\r\n        case SHAPE_FORMS.Square:\r\n            return <rect key={index} x={`${position.x}`} y={`${position.y}`} width={shapeWidth} height={shapeWidth} fill={getColor(shape.color)} />\r\n    }\r\n};\r\n\r\nconst shapesMock = {\r\n    type: SHAPE_TYPE.Combined,\r\n    shapes: [\r\n\r\n        {\r\n            type: SHAPE_TYPE.Simple,\r\n            form: SHAPE_FORMS.Triangle,\r\n            color: {\r\n                type: \"COLOR\",\r\n                color: COLORS.RED\r\n            }\r\n        },\r\n        {\r\n            type: SHAPE_TYPE.Simple,\r\n            form: SHAPE_FORMS.Triangle,\r\n            color: {\r\n                type: \"COLOR\",\r\n                color: COLORS.RED\r\n            }\r\n        },\r\n        {\r\n            type: SHAPE_TYPE.Simple,\r\n            form: SHAPE_FORMS.Triangle,\r\n            color: {\r\n                type: \"COLOR\",\r\n                color: COLORS.RED\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\nclass Grid {\r\n    constructor(fullLength, tileSize, index) {\r\n        const tilesAmount = Math.sqrt(fullLength);\r\n        this.minX = index % tilesAmount * tileSize;\r\n        this.maxX = (index % tilesAmount + 1) * tileSize;\r\n        this.minY = Math.floor(index / tilesAmount) * tileSize;\r\n        this.maxY = Math.floor(index / tilesAmount + 1) * tileSize;\r\n    }\r\n}\r\n\r\nconst SvgView = (props) => {\r\n    const shapes = props.code ? sortShapes(props.code) : [];\r\n    const tiles = Math.pow(MAX_X / GRID_SIZE, 2);\r\n    const render = Array.from(Array(tiles).keys()).flatMap(key =>\r\n        renderShapes(shapes, new Grid(tiles, GRID_SIZE, key))\r\n    )\r\n    console.log(render);\r\n    return (\r\n        <StyledSVG viewBox={`${MIN_X} ${MIN_Y} ${MAX_X} ${MAX_Y}`}>\r\n            {render}\r\n        </StyledSVG>\r\n    );\r\n};\r\n\r\nexport default SvgView;\r\n","const contenido = [`\r\n# Tutorial de Programación\r\n\r\n## Introducción.\r\n\r\nDecidí hacerlo en un formato interactivo para que puedan ver resultados a medida que se explican los conceptos.\r\nEl objetivo de este tutorial es entender en que consiste programar y como componer e interpretar un programa.\r\n\r\nLa programación hoy se conoce como parte de las ciencias de la computación o de la ingeniería de software, pero la vemos en cualquier dispositivo que tiene un proceso definido de manera automática.\r\nLa práctica de la programación en sí no tiene que ver tanto con la computación.\r\n\r\n`,`\r\nUna descripción muy buena sobre la programación la define como un **estudio de los procesos**.\r\n\r\nProgramar consiste principalmente en definir procesos que eventualmente pueden o no ser ejecutados por una computadora, y la programación consiste en definir estos procesos.\r\nDe la misma manera en que la matemática se preocupa por **lo que es**, la programación se preocupa por **cómo se hace**.\r\n\r\nPara programar en primer lugar utilizamos un **lenguaje de programación** que es una manera de poder expresar un procedimiento y que sea entendible tanto por una computadora como por una persona.\r\nEn este caso vamos a estar usando un lenguaje hecho específicamente para este tutorial. Vamos a ir analizando paso a paso como componer, ejecutar y analizar un programa simple.\r\n\r\nEn la inferfaz de arriba a la izquierda hay un editor de texto, en el cual vamos a escribir el código que querramos ejecutar.\r\n\r\nSi queremos ejecutar el código arriba a la derecha del editor hay un botón que dice Ejecutar.\r\n\r\nA la derecha hay una imagen generada por el interprete del lenguaje al ejecutar el código.\r\nPara generar estas imagenes el interprete lee este código, aplica cada declaración, y en función del resultado genera una imágen. A lo largo del tutorial vamos a explorar este lenguaje y es necesario que editen el código que aparece en el editor y lo ejecuten para poner en práctica los conceptos y realizar los programas.\r\n`,`\r\n## Datos y Procedimientos.\r\n\r\nUn **procedimiento** es algo que ejecuta una acción, es decir, 'algo que hace'.\r\n\r\nPara poder ejecutar o cumplir esta acción el procedimiento necesita **datos** que sería información que nosotros le facilitamos.\r\n\r\nEsto es lo mismo que usar un microondas, en el cual elegimos la duración e iniciamos el dispositivo. Los datos son los segundos que va a tardar en calentar la comida, lo cual seleccionamos desde la botonera,  y el procedimiento de calentar lo iniciamos al apretar el boton de iniciar.\r\n\r\nEl lenguaje de programación en este caso, entiende ambos: datos y procedimientos. Los procedimientos en este lenguaje vemos que tienen un nombre y luego un conjunto de paréntesis.\r\nEn estos paréntesis es donde le pasamos lo que llamamos **Parámetros**, que pueden ser tanto procedimientos, como datos.\r\n`,`\r\nPara aclarar esto pensemos en una función matemática: **f(x) = x + 1**. Esta función recibe como dato una **x** y le suma 1.\r\nSi nosotros aplicamos **f(1)** obtenemos como resultado **2**. Si aplicamos **f(2)** obtenemos **3**.\r\nLa función **f** tiene una similitud con un procedimiento, nosotros le pasamos nuestros datos como parámetro y **f** la procesa y obtiene un resultado en base a los datos que le pasemos como parámetro.\r\n\r\nEl único parámetro de **f(x)** es **x**, y el procedimiento calcula ese resultado en que sería aplicar **x + 1**. En los lenguajes de programación ocurre algo muy similar.\r\n\r\nPara poder llamar a estos procedimientos usamos 'declaraciones', es decir acciones a ejecutar por el interprete de nuestro lenguaje de programación.\r\n`,`\r\n\r\nComo vemos tenemos el siguiente código:\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Circulo\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`Ejecutar\\`\\`\\` es un procedimiento, el cual lo que hace es recibir como parámetro cada declaración. En este caso tenemos una sola declaración pero puede recibir cuantas declaraciones quiera.\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    declaracion1\r\n)\r\n\r\n\\`\\`\\`\r\n`,`\r\nEs importante también saber que si queremos ejecutar más declaraciones, cada declaración dentro de ejecutar tiene que estar separada por coma, y siempre entre parentesis.\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Declaracion1,\r\n    Declaracion2,\r\n    Declaracion3\r\n)\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`Ejecutar solo funciona si lo escribimos con la primer letra en mayuscula y sin caracteres especiales como tildes.\r\n`,`\r\nSi nosotros lo escribimos como \\`\\`\\`ejecutar(Declaración1)\\`\\`\\` no va a funcionar porque pusimos un caracter especial (la tilde), y además la primera letra debe ir en mayuscula.\r\n\r\nEn este código la declaración que vamos a usar es la de llamar al procedimiento \\`\\`\\`Dibujar\\`\\`\\`. Este procedimiento también recibe los datos como parámetro.\r\nEn este caso el parámetro que le pasamos es \\`\\`\\`Circulo\\`\\`\\`.\r\n\r\n\\`\\`\\`Ejecutar\\`\\`\\` lo que hace es llamar al procedimiento de \\`\\`\\`Dibujar\\`\\`\\`, el cual renderiza nuestro circulo en cada cuadrante de la grilla.\r\n\r\nLa grilla que vemos es una grilla de 10 x 10 cuadrantes, dibujar justamente renderiza la figura que le pasemos como parámetro en cada cuadrante de la grilla de 10x10. Ejemplo:\r\n\r\n<blockquote>\r\n    <p align=\"center\">\r\n        <img src=\"https://i.ibb.co/gmJrVhr/grilla-vacia.png\" alt=\"grilla-vacia\" border=\"0\">\r\n    </p>\r\n</blockquote>\r\n\r\nAcá podemos visualizar como es la división por cuadrantes de la grilla. Al ejecutar el código va a renderizar en cada cuadrante una figura que nosotros programemos y la va a repetir en cada cuadrante:\r\n\r\n<blockquote>\r\n    <p align=\"center\">\r\n        <img src=\"https://i.ibb.co/TRNtHsL/grilla-llena.png\" alt=\"grilla-llena\" border=\"0\">\r\n    </p>\r\n</blockquote>\r\n        \r\n`,`\r\nProbemos cambiando el código en el editor por el siguiente:\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Cuadrado\r\n    )\r\n)\r\n\\`\\`\\`\r\n`,`\r\nAhora probemos con un triangulo:\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Triangulo\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\nComo vemos los datos que pasamos como parámetro para poder dibujar es uno de los siguientes:\r\n\r\n\\`\\`\\`\r\n- Cuadrado\r\n- Triangulo\r\n- Circulo\r\n\\`\\`\\`\r\n\r\nEstos datos son lo que llamamos **Primitivos**. Los primitivos son los tipos de datos más elementales que nos aporta un lenguaje de programación, en el caso de este lenguaje son formas geométricas.\r\n`,`\r\nRecuerden que en este lenguaje de programación no usamos caracteres especiales (tildes, etc) en los nombres de los procedimientos o en los nombres de los primitivos, y que los procedimientos y primitivos comienzan con mayuscula.\r\nTambién recuerden que los procedimientos tienen un conjunto de paréntesis **()** luego del nombre, dentro del cual pasamos los datos como parámetros.\r\n\r\nVamos a ver otro procedimiento, en este caso uno llamado \\`\\`\\`Colorear\\`\\`\\`.\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Colorear(Triangulo, Rojo)\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\nEn este procedimiento aparece otro primitivo, el Color. El primer parámetro de Colorear es una forma, y el segundo es un color. Si pasamos primero un color y luego una forma, el procedimiento no va a funcionar. Es importante respetar el orden de los parámetros.\r\n`,`\r\nLos colores disponibles son:\r\n\r\n\\`\\`\\`\r\n- Rojo\r\n- Verde\r\n- Azul\r\n- Blanco\r\n- Negro\r\n\\`\\`\\`\r\n\r\nEl color negro sirve si queremos ocultar una forma, dado que es el mismo color que el fondo de la imágen.\r\nCon esto vemos que por ahora tenemos los procedimientos\r\n\r\n- \\`\\`\\`Ejecutar(Declaracion1, Declaracion2, Declaracion3)\\`\\`\\`: En el cual le pasamos la cantidad de declaraciones que querramos ejecutar. A este procedimiento solo lo usamos una sola vez, y lo usamos para definir dentro de el las distintas declaraciones.\r\n- \\`\\`\\`Dibujar(Forma)\\`\\`\\`: El cual recibe como primer parámetro una forma (Circulo, Triangulo o Cuadrado).\r\n- \\`\\`\\`Colorear(Forma, Color)\\`\\`\\`: El cual nos genera una forma de cierto color a partir de una Forma como primer parámetro \\`\\`\\`(Circulo, Triangulo o Cuadrado)\\`\\`\\`\r\ny un color como segundo parámetro \\`\\`\\`(Rojo, Verde, Azul, Blanco o Negro)\\`\\`\\`.\r\n`,`\r\n## Medios de Combinación.\r\n\r\nAhora vamos a ver un procedimiento nuevo que extiende un poco el concepto de Colorear. Colorear lo que hace es combinar dos primitivos. Color y Forma.\r\n\r\nEsto es otra base fundamental de cualquier lenguaje de programación: los **Medios de Combinación**, es decir, son procedimientos que nos permiten combinar primitivos.\r\n\r\nVamos a ver otro procedimiento que también es un medio de combinacion: \\`\\`\\`Combinar\\`\\`\\`.\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Combinar(Triangulo, Cuadrado)\r\n    )\r\n)\r\n\\`\\`\\`\r\nEn este ejemplo, estamos combinando un Triangulo y un Cuadrado y este nos genera una forma nueva que es una combinación de los dos, luego se lo pasamos como parámetro a \\`\\`\\`Ejecutar\\`\\`\\`.\r\n\r\nAl procedimiento \\`\\`\\`Combinar\\`\\`\\` le pasamos como parámetro 2 formas, y nos genera una nueva, Podemos pasarle las formas que querramos, pero siempre 2.\r\n\r\nPodemos combinar varios de estos procedimientos de combinación para generar programas más complejos, como por ejemplo colorear una forma y usarla como parámetro de Combinar:\r\n`,`\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Combinar(\r\n            Triangulo,\r\n            Colorear(Cuadrado, Rojo)\r\n        )\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\nPara avanzar con lo que sigue vamos a empezar a realizar un diagrama del código en la cual vamos a entender como se ejecuta el código en secuencia. Tomemos el siguiente código:\r\n\r\nSi realizamos un análisis gráfico de como se ejecuta este tenemos el siguiente diagrama:\r\n\r\n<blockquote>\r\n<p align=\"center\">\r\n<img src=\"https://i.ibb.co/Yj8m0qK/diagrama-1.png\" alt=\"diagrama-1\" border=\"0\">\r\n</p>\r\n</blockquote>\r\n\r\nEn este diagrama vemos enumerado el paso a paso de la ejecución con números que lo indican:\r\n\r\n- Primero se ejecuta el parámetro Triangulo.\r\n- Luego se ejecutan los parámetros de Colorear: primero Cuadrado y luego Rojo.\r\n- Luego de evaluar estos parámetros se ejecuta Colorear.\r\n- Luego se ejecuta Combinar y tenemos un triangulo combinado con un cuadrado rojo.\r\n- Luego se ejecuta el procedimiento Dibujar, que va a ejecutar nuestro renderizado.\r\n- Y por último vemos como Ejecutar es lo último que ocurre en nuestro diagrama.\r\n\r\nEste diagrama se lo conoce como **Modelo de Sustitución**. Es decir, vamos reemplazando paso a paso como fué la ejecución de cada procedimiento y en que orden se evaluan los datos. \r\n\r\n`,`\r\nPara verlo de otra manera, imaginenlo como si tuviesemos una función **f(x) = x + 1** (la cual suma 1 a un valor x), y otra función **g(x) = x * 2** (la cual multiplica por 2 a un valor x).\r\n\r\nSi combinamos el resultado de **f(x)** y ese resultado lo ponemos como el parámetro de **g(x)** estamos haciendo una composición.\r\n\r\nDe esa manera si ejecutamos las funciones asi: **g(f(2))**, obtenemos primero de **f(2)**, que como resultado nos devuelve **3**, y sobre ese **3** aplicamos **g(3)** obtenemos un 6 como resultado final.\r\n\r\nComponer entre procedimientos es similar a componer entre funciones matemáticas, es una manera de componer procedimientos más complejos a partir de procedimientos más simples.\r\n\r\nEsto parece complicado pero a medida que avancemos se vá a asimilar mejor el concepto.\r\n`,`\r\n\r\nSi queremos generar una combinación de tres formas, podemos usar el resultado de Combinar como un parámetro de de otro llamado al procedimiento de Combinar: \r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Combinar(\r\n            Triangulo,\r\n            Combinar(\r\n                Cuadrado,\r\n                Circulo\r\n            )\r\n        )\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\nVeamos el modelo de sustitución:\r\n\r\n<blockquote>\r\n    <p align=\"center\">\r\n        <img src=\"https://i.ibb.co/X2Lpwbv/diagrama-2.png\" alt=\"diagrama-2\" border=\"0\">\r\n    </p>\r\n</blockquote>\r\n\r\n`,`\r\nTambién podemos expandir este concepto usando el procedimiento de Colorear a uno de los parámetros:\r\n\r\n\\`\\`\\`\r\nEjecutar(\r\n    Dibujar(\r\n        Combinar(\r\n            Triangulo,\r\n            Combinar(\r\n                Cuadrado,\r\n                Colorear(Circulo, Verde)\r\n            )\r\n        )\r\n    )\r\n)\r\n\\`\\`\\`\r\n\r\nY por último veamos el modelo de sustitución de este código:\r\n\r\n<blockquote>\r\n    <p align=\"center\">\r\n        <img src=\"https://i.ibb.co/yFcMQVm/diagrama-3.png\" alt=\"diagrama-3\" border=\"0\">\r\n    </p>\r\n</blockquote>\r\n\r\n`,`\r\n## Contexto\r\n\r\nVamos a explorar el concepto de 'Contexto'. Hasta ahora vemos que tenemos ciertos procedimientos y primitivos definidos. ¿De donde salen?\r\n\r\nCada lenguaje de programación nos brinda un 'contexto', el cual nos aporta definiciones previas que usamos para componer nuestros programas.\r\n\r\nEn este caso el contexto es el que nos aporta Ejecutar, Combinar, Dibujar y al mismo tiempo nos aporta los primitivos como circulo o Verde.\r\n\r\n¿Que pasaría si queremos usar el contexto para aportar nuestras propias definiciones dentro de nuestro programa?\r\n`,`\r\n## Medios de Abstracción.\r\n\r\nSupongamos que yo defino una forma, y la quiero reutilizar más adelante en mi programa. Para eso tenemos un nuevo procedimiento llamado \\`\\`\\`Definir\\`\\`\\`\r\n\\`\\`\\`\r\nEjecutar(\r\n    Definir(\"MiForma\", Combinar(Circulo, Triangulo)),\r\n    Dibujar(MiForma)\r\n)\r\n\\`\\`\\`\r\n\r\nEn este programa estamos utilizando varios parámetros dentro de \\`\\`\\`Ejecutar\\`\\`\\`. Pero además estamos usando este nuevo procedimiento: \\`\\`\\`Definir\\`\\`\\`.\r\n`,`\r\nEste procedimiento recibe un parámetro con un primitivo nuevo que sería una 'cadena de texto', la cual va siempre entre comillas dobles \"\". \r\n\r\nMediante una cadena de texto le asignamos un nombre a nuestra definición \\`\\`\\`MiForma\\`\\`\\`, y como segundo parámetro le pasamos el procedimiento \\`\\`\\`Combinar\\`\\`\\`.\r\n\r\nLuego nosotros llamamos al procedimiento \\`\\`\\`Dibujar\\`\\`\\` y este hace referencia a \\`\\`\\`MiForma\\`\\`\\`, el cual es conocido por nuestro programa porque en la declaración anterior la definimos usando el procedimiento \\`\\`\\`Definir\\`\\`\\`.\r\n\r\nDefinir recibe siempre como primer parámetro una cadena de texto, y como segundo parámetro puede recibir cualquier otro primitivo.\r\n\r\nPodemos usar \\`\\`\\`Definir\\`\\`\\` para abstraer ciertas formas y reutilizarlas en las declaraciones siguientes.\r\n\r\nDefinir es lo que se conoce como \\`\\`\\`Medios de Abstracción\\`\\`\\` Que son la última base fundamental de los lenguajes de programación que vamos a ver en este tutorial.\r\nLos medios de abstracción nos permite generar una abstracción agregandola al contexto para poder reutilizar esa abstracción en las declaraciones siguientes del programa.\r\nSi nosotros quisieramos llamar a \\`\\`\\`MiForma\\`\\`\\` antes de definirla, el programa fallaría, porque aún no es conocida por el contexto de este lenguaje, por eso es importante respetar el orden.\r\n`,`\r\n## Cierre\r\nA modo repaso, comenzamos aprendiendo que es un procedimiento, que rol cumplen los datos en los procedimientos, y que es una declaración.\r\nEn el tutorial fuimos explorando el lenguaje y también aprendimos las 3 bases fundamentales de cualquier lenguaje de programación, que siempre tienen que resonar a la hora de aprender\r\ncualquier otro lenguaje de programación:\r\n\r\n- ¿Cuales son los primitivos?\r\n- ¿Cuales son los medios de combinación?\r\n- ¿Cuales son los medios de abstracción?\r\n\r\nTambién es importante siempre pensar en el contexto de ejecución de cada programa, y entender el rol que cumple el orden de ejecución de cada declaración.\r\n\r\nEn algunos lenguajes estos conceptos pueden variar en su nombre, pero en si aparecen los mismos conceptos en cada lenguaje de programación.\r\n\r\nAhora prueben practicar y generar distintas imagenes en la grilla.\r\n\r\nSi les copa compartan en sus comentarios en elsalon alguna selección de capturas de las imágenes generadas por ustedes con este lenguaje.\r\n`];\r\n\r\nexport default contenido;","import { Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\nimport * as Theme from '../style/theme';\r\nimport ReactMarkdown from 'react-markdown/with-html';\r\nimport content from './tutorialContent';\r\n\r\nconst ContentContainer = styled.div`\r\n    width: 100%;\r\n    height: 41.5vh;\r\n    background: ${Theme.primaryColor};\r\n    overflow-y: auto;\r\n    color: ${Theme.codeColor};\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nconst FooterContainer = styled.div`\r\n    width: 100%;\r\n    height: 4vh;\r\n    box-sizing: border-box;\r\n    background: ${Theme.primaryColor};\r\n    border-top: solid ${Theme.codeColor} 0.1rem;\r\n`;\r\n\r\nconst PageCounter = styled.h3`\r\n    color: ${Theme.codeColor};\r\n    font-size: 1.2rem;\r\n    margin: 0rem;\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    color: ${Theme.codeColor};\r\n    font-size: 1.5rem;\r\n    margin: 1rem;\r\n`;\r\n\r\n\r\nconst Tutorial  = (props) => {\r\n    const [page, setPage] = React.useState(0);\r\n    const ref = React.useRef();\r\n    return (\r\n        <Grid container>\r\n            <Grid xs={12}>\r\n                <ContentContainer ref={ref}>\r\n                    <ReactMarkdown escapeHtml={false} source={content[page]}/>\r\n                </ContentContainer>\r\n            </Grid>\r\n            <Grid xs={12}>\r\n                <FooterContainer>\r\n                    <Grid container justify={\"space-around\"} alignItems={\"center\"}>\r\n                        <Grid item>\r\n                            <Button onClick={() => {\r\n                                setPage(Math.max(0, page-1));\r\n                                ref.current.scrollTop = 0;\r\n                            }} style={{margin: \"0.5rem\"}}>\r\n                                {\"<<\"}\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <PageCounter style={{margin: \"0.5rem\"}}>\r\n                                {page + 1}/{content.length}\r\n                            </PageCounter>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setPage(Math.min(content.length-1, page+1));\r\n                                    ref.current.scrollTop = 0;\r\n                                }}\r\n                                style={{margin: \"0.5rem\"}}\r\n                            >\r\n                                {\">>\"}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </FooterContainer>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Tutorial;\r\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport TextEditor from './components/TextEditor';\nimport Terminal from './components/Terminal';\nimport LanguageService from './services/LanguageService';\nimport GlobalStyle from './components/style/GlobalStyle';\nimport styled from 'styled-components';\nimport border from './components/style/border';\nimport StyledSVG from './components/SvgView';\nimport Tutorial from './components/tutorial/Tutorial';\n\nconst WindowContainer = styled.div`\n    ${border}\n    margin: 1.5%;\n    width: 97%;\n    height: 100%;\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\n\nconst App = () => {\n\n    const [consoleContent, setConsoleContent] = React.useState(\"\");\n    const [code, setCode] = React.useState([]);\n    const [success, isSuccess] = React.useState(true);\n    return(\n        <React.Fragment>\n            <GlobalStyle/>\n            <Grid container direction={\"row\"} justify={\"center\"} spacing={1}>\n                <Grid item xs={12} sm={6}>\n                    <Grid container justify={\"center\"}>\n                        <Grid item xs={12} style={{height: \"48vh\"}}>\n                            <WindowContainer>\n                                <TextEditor\n                                    isSuccess={isSuccess}\n                                    setCode={setCode}\n                                    setConsoleContent={setConsoleContent}\n                                    setRenderer={LanguageService.setRenderer}\n                                    run={LanguageService.run}\n                                />\n                            </WindowContainer>\n                        </Grid>\n                        <Grid item xs={12} style={{height: \"48vh\"}}>\n                            <WindowContainer>\n                                <Tutorial/>\n                            </WindowContainer>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Grid container justify={\"center\"}>\n                        <Grid item xs={12} style={{height: \"68vh\"}}>\n                            <WindowContainer>\n                                <StyledSVG code={code}/>\n                            </WindowContainer>\n                        </Grid>\n                        <Grid item xs={12} style={{height: \"28vh\"}}>\n                            <Terminal content={consoleContent} success={success}/>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}