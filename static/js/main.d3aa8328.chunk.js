(this["webpackJsonptutorial-pav"]=this["webpackJsonptutorial-pav"]||[]).push([[0],{259:function(e,n,a){e.exports=a(635)},264:function(e,n,a){},269:function(e,n,a){},270:function(e,n,a){},635:function(e,n,a){"use strict";a.r(n);var o=a(1),r=a.n(o),t=a(245),i=a.n(t),c=(a(264),a(50)),s=a(18),l=a(649),u=a(246),m=(a(152),a(153),a(265),a(266),a(267),a(268),a(269),a(270),a(19)),d="hsl(231, 15%, 10%)";function p(){var e=Object(s.a)(["\n    background-color: ",";\n    color: ",";\n    border: solid "," 0.1rem;\n    align-self: center;\n    font-size: 1.2rem;\n    padding: 0.5rem 1rem;\n    outline: none;\n        transition: background-color 0.3s, color 0.2s ease;\n    &:hover {\n        transform: scale(1.05, 1.05);\n    }\n    &:active {\n        transform: scale(0.95, 0.95);\n        background-color: ",";\n        color: ",";\n        border: solid "," 0.1rem;\n        transition: background-color 0s, color 0s ease;\n    }\n"]);return p=function(){return e},e}var g=m.b.button(p(),"#99FF","hsl(231, 15%, 13%)","hsl(231, 15%, 13%)","hsl(231, 15%, 13%)","#99FF","#99FF");function f(){var e=Object(s.a)(["\n  background-color: ",";\n  color: ",";\n  height: 4vh;\n  text-decoration: underline;\n"]);return f=function(){return e},e}function b(){var e=Object(s.a)(["\n  font-size: 1.5vmax;\n  margin: 0rem;\n"]);return b=function(){return e},e}var v={theme:"dracula",autoCloseBrackets:!0,cursorScrollMargin:48,mode:"jsx",lineNumbers:!0,indentUnit:2,tabSize:2,styleActiveLine:!0,viewportMargin:99,height:"100%"},j=m.b.h1(b()),y=m.b.div(f(),"#99FF",d),E=function(e){return o.createElement(y,null,o.createElement(l.a,{container:!0,alignItems:"center",justify:"space-between"},o.createElement(l.a,{item:!0,style:{marginLeft:"1rem"}},o.createElement(j,null,"Editor")),o.createElement(l.a,{item:!0,style:{marginRight:"1rem",marginTop:"0.2rem"}},o.createElement(g,{onClick:function(n){n.preventDefault(),e.execute()}},"Ejecutar"))))},h=function(e){o.useEffect((function(){return e.setRenderer(e.setCode)}),[]);var n=o.useState("Ejecutar(\n  Dibujar(\n    Circulo\n  )\n)\n"),a=Object(c.a)(n,2),r=a[0],t=a[1],i=function(){try{e.run(r),e.setConsoleContent("Se ejecut\xf3 corectamente"),e.isSuccess(!0)}catch(n){console.log(n),e.isSuccess(!1),e.setConsoleContent(n.message)}};return o.useEffect((function(){return i()}),[]),o.createElement(l.a,{container:!0,spacing:0},o.createElement(l.a,{item:!0,xs:12},o.createElement(E,{execute:i})),o.createElement(l.a,{item:!0,xs:12},o.createElement(u.Controlled,{name:"js",value:r,options:v,onBeforeChange:function(e,n,a){t(a)}})))},q="border: 0.1rem solid ".concat("#99FF",";");function C(){var e=Object(s.a)(["\n    margin: 1.5%;\n    width: 94%;\n    padding: 1.5%;\n    height: 90%;\n    background: ",";\n    color: ",";\n    font-family: 'Operator Mono', 'Source Sans Pro', Menlo, Monaco, Consolas,\n\t\tCourier New, monospace;\n    font-size: 1rem;\n    overflow-y: auto;\n    ",";\n"]);return C=function(){return e},e}var x=m.b.div(C(),d,(function(e){return e.success?"#00FF00":"#FF0000"}),q),w=function(e){return r.a.createElement(x,{success:e.success},r.a.createElement("p",null,"{}"===e.content?">":(n=e.content,r.a.createElement(r.a.Fragment,null,r.a.createElement(r.a.Fragment,null,"> "),n.split("\n").map((function(e){return r.a.createElement(r.a.Fragment,null,e.replace("\t","\xa0\xa0"),r.a.createElement("br",null))}))))));var n},F=a(253),D=a(256),S="Simple",k="Combinada",z="Circulo",O="Triangulo",M="Cuadrado",T="Rojo",A="Verde",L="Azul",R="Blanco",P="Negro",V=a(150),B=function(e){return{type:"COLOR",color:e}},N=function(e,n){return{type:S,form:e,color:n}},X=function(e){return{type:k,shapes:Object(V.flatMap)(e,(function(e){return e.type===k?e.shapes:[e]}))}};function Y(e){var n=e.search(/\S/);return-1==n?"":e.slice(n)}function I(e){var n,a;if(e=Y(e),n=/^"([^"]*)"/.exec(e))a={type:"value",value:n[1]};else if(n=/^\d+\b/.exec(e))a={type:"value",value:Number(n[0])};else{if(!(n=/^[^\s(),"]+/.exec(e)))throw new SyntaxError("Sintaxis Inesperada: "+e);a={type:"word",name:n[0]}}return function e(n,a){if("("!=(a=Y(a))[0])return{expr:n,rest:a};for(a=Y(a.slice(1)),n={type:"apply",operator:n,args:[]};")"!=a[0];){var o=I(a);if(n.args.push(o.expr),","==(a=Y(o.rest))[0])a=Y(a.slice(1));else if(")"!=a[0])throw new SyntaxError("Se esperaba ',' o ')'")}return e(n,a.slice(1))}(a,e.slice(n[0].length))}var U=Object.create(null);function H(e,n){if("value"==e.type)return e.value;if("word"==e.type){if(e.name in n)return n[e.name];throw new ReferenceError("Undefined binding: ".concat(e.name))}if("apply"==e.type){var a=e.operator,o=e.args;if("word"==a.type&&a.name in U)return U[a.name](e.args,n);var r=H(a,n);if("function"==typeof r)return r.apply(void 0,Object(D.a)(o.map((function(e){return H(e,n)}))));throw new TypeError("Applying a non-function.")}}U.Ejecutar=function(e,n){var a,o="No hay ninguna expresi\xf3n definida.",r=Object(F.a)(e);try{for(r.s();!(a=r.n()).done;){o=H(a.value,n)}}catch(t){r.e(t)}finally{r.f()}return o},U.Definir=function(e,n){if(2!=e.length)throw new SyntaxError("Definir lleva 2 argumentos.");var a=H(e[1],n);return n[e[0].value]=a,console.log(n[e[0].name]),a},U.Colorear=function(e,n){if(2!=e.length)throw new SyntaxError("'Colorear' lleva 2 argumentos.");var a=H(e[0],n);if(console.log(a),a.type!==S&&a.type!==k)throw new SyntaxError("El primer argumento de 'Colorear' debe ser una forma.");var o=H(e[1],n);if("COLOR"!==o.type)throw new SyntaxError("El segundo argumento de 'Colorear' debe ser un color.");return Object(V.cloneDeep)(function(e,n){return e.type===S?N(e.form,n):X(e.shapes.map((function(e){return N(e.form,n)})))}(a,o))},U.Combinar=function(e,n){if(2!=e.length)throw new SyntaxError("'Combinar' lleva 2 argumentos.");var a=H(e[0],n),o=H(e[1],n);if(a.type!==S&&a.type!==k)throw new SyntaxError("El primer argumento de 'Combinar' debe ser una forma.");if(o.type!==S&&o.type!==k)throw new SyntaxError("El segundo argumento de 'Combinar' debe ser una forma.");return function(e,n){return X([e,n])}(a,o)};var J=Object.create(null);J.Blanco=B(R),J.Negro=B(P),J.Rojo=B(T),J.Verde=B(A),J.Azul=B(L),J.Circulo=N(z,J.Blanco),J.Cuadrado=N(M,J.Blanco),J.Triangulo=N(O,J.Blanco);var Q={setRenderer:function(e){U.Dibujar=function(n,a){if(1!=n.length)throw new SyntaxError("'Dibujar' solo lleva 1 par\xe1metro");var o=H(n[0],a);if(o.type!==S&&o.type!==k)throw new SyntaxError("'Dibujar' espera 1 par\xe1metro del tipo forma.");var r=H(n[0],a);return e(r),r}},run:function(e){return H(function e(n){var a=I(n),o=a.expr,r=a.rest;return Y(r).length>0&&e(r),o}(e),Object.create(J))}};function W(){var e=Object(s.a)(["\n    body {\n        overflow-x: hidden;\n        background-color: ",";\n    }\n    ::-webkit-scrollbar {\n        width: 0.6rem;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: ",";\n        border: 0.01rem solid ",";\n        border-radius: 0.2rem;\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background-color: ",";\n        border-radius: 0.2rem;\n    }\n"]);return W=function(){return e},e}var K=Object(m.a)(W(),"hsl(231, 15%, 13%)",d,"#99FF","#99FF"),$=a(254);function G(){var e=Object(s.a)(["\n    width: 30vw;\n    height: 30vw;\n    border: 1px solid ",";\n    background-color: black;\n"]);return G=function(){return e},e}var Z=m.b.svg(G(),"#99FF"),_=function(e){switch(e.color){case A:return"#00FF00";case L:return"#0000FF";case T:return"#FF0000";case R:return"#FFFFFF";case P:return"#000000"}},ee=function(e,n,a,o){var t=function(e,n,a){return{y:a.minY+Math.floor(e/n)*(a.maxY-a.minY)/n,x:a.minX+e%n*(a.maxX-a.minX)/n}}(n,a,o),i=function(e,n){return(n.maxX-n.minX)/e}(a,o);switch(e.form){case z:return r.a.createElement("circle",{key:n,cx:t.x+i/2,cy:t.y+i/2,r:i/2,fill:_(e.color)});case O:return r.a.createElement("polygon",{key:n,points:"".concat(t.x+i/2,",").concat(t.y," ").concat(t.x+i,",").concat(t.y+i," ").concat(t.x,", ").concat(t.y+i),style:{fill:_(e.color)}});case M:return r.a.createElement("rect",{key:n,x:"".concat(t.x),y:"".concat(t.y),width:i,height:i,fill:_(e.color)})}},ne=function e(n,a,o){Object($.a)(this,e);var r=Math.sqrt(n);this.minX=o%r*a,this.maxX=(o%r+1)*a,this.minY=Math.floor(o/r)*a,this.maxY=Math.floor(o/r+1)*a},ae=function(e){var n=e.code?function(e){switch(e.type){case S:return[e];case k:return e.shapes.map((function(e){return e}));default:return[]}}(e.code):[],a=Math.pow(10,2),o=Array.from(Array(a).keys()).flatMap((function(e){return function(e,n){var a=function(e){for(var n=1;n*n<e;)n++;return n}(e.length);return r.a.createElement(r.a.Fragment,null,e.map((function(e,o){return ee(e,o,a,n)})))}(n,new ne(a,50,e))}));return console.log(o),r.a.createElement(Z,{viewBox:"".concat(0," ").concat(0," ").concat(500," ").concat(500)},o)},oe=a(255),re=a.n(oe),te=["\n# Tutorial de Programaci\xf3n\n\n## Introducci\xf3n.\n\nDecid\xed hacerlo en un formato interactivo para que puedan ver resultados a medida que se explican los conceptos.\nEl objetivo de este tutorial es entender en que consiste programar y como componer e interpretar un programa.\n\nLa programaci\xf3n hoy se conoce como parte de las ciencias de la computaci\xf3n o de la ingenier\xeda de software, pero la vemos en cualquier dispositivo que tiene un proceso definido de manera autom\xe1tica.\nLa pr\xe1ctica de la programaci\xf3n en s\xed no tiene que ver tanto con la computaci\xf3n.\n\n","\nUna descripci\xf3n muy buena sobre la programaci\xf3n la define como un **estudio de los procesos**.\n\nProgramar consiste principalmente en definir procesos que eventualmente pueden o no ser ejecutados por una computadora, y la programaci\xf3n consiste en definir estos procesos.\nDe la misma manera en que la matem\xe1tica se preocupa por **lo que es**, la programaci\xf3n se preocupa por **c\xf3mo se hace**.\n\nPara programar en primer lugar utilizamos un **lenguaje de programaci\xf3n** que es una manera de poder expresar un procedimiento y que sea entendible tanto por una computadora como por una persona.\nEn este caso vamos a estar usando un lenguaje hecho espec\xedficamente para este tutorial. Vamos a ir analizando paso a paso como componer, ejecutar y analizar un programa simple.\n\nEn la inferfaz de arriba a la izquierda hay un editor de texto, en el cual vamos a escribir el c\xf3digo que querramos ejecutar.\n\nSi queremos ejecutar el c\xf3digo arriba a la derecha del editor hay un bot\xf3n que dice Ejecutar.\n\nA la derecha hay una imagen generada por el interprete del lenguaje al ejecutar el c\xf3digo.\nPara generar estas imagenes el interprete lee este c\xf3digo, aplica cada declaraci\xf3n, y en funci\xf3n del resultado genera una im\xe1gen. A lo largo del tutorial vamos a explorar este lenguaje y es necesario que editen el c\xf3digo que aparece en el editor y lo ejecuten para poner en pr\xe1ctica los conceptos y realizar los programas.\n","\n## Datos y Procedimientos.\n\nUn **procedimiento** es algo que ejecuta una acci\xf3n, es decir, 'algo que hace'.\n\nPara poder ejecutar o cumplir esta acci\xf3n el procedimiento necesita **datos** que ser\xeda informaci\xf3n que nosotros le facilitamos.\n\nEsto es lo mismo que usar un microondas, en el cual elegimos la duraci\xf3n e iniciamos el dispositivo. Los datos son los segundos que va a tardar en calentar la comida, lo cual seleccionamos desde la botonera,  y el procedimiento de calentar lo iniciamos al apretar el boton de iniciar.\n\nEl lenguaje de programaci\xf3n en este caso, entiende ambos: datos y procedimientos. Los procedimientos en este lenguaje vemos que tienen un nombre y luego un conjunto de par\xe9ntesis.\nEn estos par\xe9ntesis es donde le pasamos lo que llamamos **Par\xe1metros**, que pueden ser tanto procedimientos, como datos.\n","\nPara aclarar esto pensemos en una funci\xf3n matem\xe1tica: **f(x) = x + 1**. Esta funci\xf3n recibe como dato una **x** y le suma 1.\nSi nosotros aplicamos **f(1)** obtenemos como resultado **2**. Si aplicamos **f(2)** obtenemos **3**.\nLa funci\xf3n **f** tiene una similitud con un procedimiento, nosotros le pasamos nuestros datos como par\xe1metro y **f** la procesa y obtiene un resultado en base a los datos que le pasemos como par\xe1metro.\n\nEl \xfanico par\xe1metro de **f(x)** es **x**, y el procedimiento calcula ese resultado en que ser\xeda aplicar **x + 1**. En los lenguajes de programaci\xf3n ocurre algo muy similar.\n\nPara poder llamar a estos procedimientos usamos 'declaraciones', es decir acciones a ejecutar por el interprete de nuestro lenguaje de programaci\xf3n.\n","\n\nComo vemos tenemos el siguiente c\xf3digo:\n\n```\nEjecutar(\n    Dibujar(\n        Circulo\n    )\n)\n```\n\n```Ejecutar``` es un procedimiento, el cual lo que hace es recibir como par\xe1metro cada declaraci\xf3n. En este caso tenemos una sola declaraci\xf3n pero puede recibir cuantas declaraciones quiera.\n\n```\nEjecutar(\n    declaracion1\n)\n\n```\n","\nEs importante tambi\xe9n saber que si queremos ejecutar m\xe1s declaraciones, cada declaraci\xf3n dentro de ejecutar tiene que estar separada por coma, y siempre entre parentesis.\n\n```\nEjecutar(\n    Declaracion1,\n    Declaracion2,\n    Declaracion3\n)\n```\n\n```Ejecutar solo funciona si lo escribimos con la primer letra en mayuscula y sin caracteres especiales como tildes.\n",'\nSi nosotros lo escribimos como ```ejecutar(Declaraci\xf3n1)``` no va a funcionar porque pusimos un caracter especial (la tilde), y adem\xe1s la primera letra debe ir en mayuscula.\n\nEn este c\xf3digo la declaraci\xf3n que vamos a usar es la de llamar al procedimiento ```Dibujar```. Este procedimiento tambi\xe9n recibe los datos como par\xe1metro.\nEn este caso el par\xe1metro que le pasamos es ```Circulo```.\n\n```Ejecutar``` lo que hace es llamar al procedimiento de ```Dibujar```, el cual renderiza nuestro circulo en cada cuadrante de la grilla.\n\nLa grilla que vemos es una grilla de 10 x 10 cuadrantes, dibujar justamente renderiza la figura que le pasemos como par\xe1metro en cada cuadrante de la grilla de 10x10. Ejemplo:\n\n<blockquote>\n    <p align="center">\n        <img src="https://i.ibb.co/gmJrVhr/grilla-vacia.png" alt="grilla-vacia" border="0">\n    </p>\n</blockquote>\n\nAc\xe1 podemos visualizar como es la divisi\xf3n por cuadrantes de la grilla. Al ejecutar el c\xf3digo va a renderizar en cada cuadrante una figura que nosotros programemos y la va a repetir en cada cuadrante:\n\n<blockquote>\n    <p align="center">\n        <img src="https://i.ibb.co/TRNtHsL/grilla-llena.png" alt="grilla-llena" border="0">\n    </p>\n</blockquote>\n        \n',"\nProbemos cambiando el c\xf3digo en el editor por el siguiente:\n\n```\nEjecutar(\n    Dibujar(\n        Cuadrado\n    )\n)\n```\n","\nAhora probemos con un triangulo:\n\n```\nEjecutar(\n    Dibujar(\n        Triangulo\n    )\n)\n```\n\nComo vemos los datos que pasamos como par\xe1metro para poder dibujar es uno de los siguientes:\n\n```\n- Cuadrado\n- Triangulo\n- Circulo\n```\n\nEstos datos son lo que llamamos **Primitivos**. Los primitivos son los tipos de datos m\xe1s elementales que nos aporta un lenguaje de programaci\xf3n, en el caso de este lenguaje son formas geom\xe9tricas.\n\n```Dibujar``` es un procedimiento que recibe un solo par\xe1metro, y tiene que ser si o si una forma, M\xe1s adelante vamos a ver como combinar m\xe1s formas para poder pasarlas como par\xe1metro de ```Dibujar```.\n","\nRecuerden que en este lenguaje de programaci\xf3n no usamos caracteres especiales (tildes, etc) en los nombres de los procedimientos o en los nombres de los primitivos, y que los procedimientos y primitivos comienzan con mayuscula.\nTambi\xe9n recuerden que los procedimientos tienen un conjunto de par\xe9ntesis **()** luego del nombre, dentro del cual pasamos los datos como par\xe1metros.\n\nVamos a ver otro procedimiento, en este caso uno llamado ```Colorear```.\n\n```\nEjecutar(\n    Dibujar(\n        Colorear(Triangulo, Rojo)\n    )\n)\n\nRecordemos que ```Dibujar``` requiere que pasemos una sola Forma como par\xe1metro.\n\n```\n\nEn este procedimiento aparece otro primitivo, el Color. El primer par\xe1metro de Colorear es una forma, y el segundo es un color. Si pasamos primero un color y luego una forma, el procedimiento no va a funcionar. Es importante respetar el orden de los par\xe1metros.\n","\nLos colores disponibles son:\n\n```\n- Rojo\n- Verde\n- Azul\n- Blanco\n- Negro\n```\n\nEl color negro sirve si queremos ocultar una forma, dado que es el mismo color que el fondo de la im\xe1gen.\n\nEs importante entender que ```Colorear``` devuelve como resultado otra forma con el color cambiado, y por eso podemos pasarle esa forma como par\xe1metro al procedimiento ```Dibujar```.\n","\n\nCon esto vemos que por ahora tenemos los procedimientos\n\n- ```Ejecutar(Declaracion1, Declaracion2, Declaracion3)```: En el cual le pasamos la cantidad de declaraciones que querramos ejecutar. A este procedimiento solo lo usamos una sola vez, y lo usamos para definir dentro de el las distintas declaraciones.\n- ```Dibujar(Forma)```: El cual recibe como primer par\xe1metro una forma (Circulo, Triangulo o Cuadrado).\n- ```Colorear(Forma, Color)```: El cual nos genera una forma de cierto color a partir de una Forma como primer par\xe1metro ```(Circulo, Triangulo o Cuadrado)```\ny un color como segundo par\xe1metro ```(Rojo, Verde, Azul, Blanco o Negro)```.\n","\n## Medios de Combinaci\xf3n.\n\nAhora vamos a ver un procedimiento nuevo que extiende un poco el concepto de Colorear. Colorear lo que hace es combinar dos primitivos. Color y Forma.\n\nEsto es otra base fundamental de cualquier lenguaje de programaci\xf3n: los **Medios de Combinaci\xf3n**, es decir, son procedimientos que nos permiten combinar primitivos.\n\nVamos a ver otro procedimiento que tambi\xe9n es un medio de combinacion: ```Combinar```.\n```\nEjecutar(\n    Dibujar(\n        Combinar(Triangulo, Cuadrado)\n    )\n)\n\nRecordemos que Dibujar requiere que pasemos una sola Forma como par\xe1metro.\n\n```\nEn este ejemplo, estamos combinando un Triangulo y un Cuadrado y este nos genera una forma nueva que es una combinaci\xf3n de los dos, luego se lo pasamos como par\xe1metro a ```Ejecutar```.\n\nAl procedimiento ```Combinar``` le pasamos como par\xe1metro 2 formas, y nos genera una nueva, Podemos pasarle las formas que querramos, pero siempre 2.\n\nPodemos combinar varios de estos procedimientos de combinaci\xf3n para generar programas m\xe1s complejos, como por ejemplo colorear una forma y usarla como par\xe1metro de Combinar:\n",'\n\n```\nEjecutar(\n    Dibujar(\n        Combinar(\n            Triangulo,\n            Colorear(Cuadrado, Rojo)\n        )\n    )\n)\n```\n\nPara avanzar con lo que sigue vamos a empezar a realizar un diagrama del c\xf3digo en la cual vamos a entender como se ejecuta el c\xf3digo en secuencia. Tomemos el siguiente c\xf3digo:\n\nSi realizamos un an\xe1lisis gr\xe1fico de como se ejecuta este tenemos el siguiente diagrama:\n\n<blockquote>\n<p align="center">\n<img src="https://i.ibb.co/Yj8m0qK/diagrama-1.png" alt="diagrama-1" border="0">\n</p>\n</blockquote>\n\nEn este diagrama vemos enumerado el paso a paso de la ejecuci\xf3n con n\xfameros que lo indican:\n\n- Primero se ejecuta el par\xe1metro Triangulo.\n- Luego se ejecutan los par\xe1metros de Colorear: primero Cuadrado y luego Rojo.\n- Luego de evaluar estos par\xe1metros se ejecuta Colorear.\n- Luego se ejecuta Combinar y tenemos un triangulo combinado con un cuadrado rojo.\n- Luego se ejecuta el procedimiento Dibujar, que va a ejecutar nuestro renderizado.\n- Y por \xfaltimo vemos como Ejecutar es lo \xfaltimo que ocurre en nuestro diagrama.\n\nEste diagrama se lo conoce como **Modelo de Sustituci\xf3n**. Es decir, vamos reemplazando paso a paso como fu\xe9 la ejecuci\xf3n de cada procedimiento y en que orden se evaluan los datos. \n\n',"\nPara verlo de otra manera, imaginenlo como si tuviesemos una funci\xf3n **f(x) = x + 1** (la cual suma 1 a un valor x), y otra funci\xf3n **g(x) = x * 2** (la cual multiplica por 2 a un valor x).\n\nSi combinamos el resultado de **f(x)** y ese resultado lo ponemos como el par\xe1metro de **g(x)** estamos haciendo una composici\xf3n.\n\nDe esa manera si ejecutamos las funciones asi: **g(f(2))**, obtenemos primero el resultado de **f(2)**, que como resultado nos devuelve **3**, y sobre ese **3** aplicamos **g(3)** obtenemos un 6 como resultado final.\n\nComponer entre procedimientos es similar a componer entre funciones matem\xe1ticas, es una manera de componer procedimientos m\xe1s complejos a partir de procedimientos m\xe1s simples.\n\nEsto parece complicado pero a medida que avancemos se v\xe1 a asimilar mejor el concepto.\n",'\n\nSi queremos generar una combinaci\xf3n de tres formas, podemos usar el resultado de Combinar como un par\xe1metro de de otro llamado al procedimiento de Combinar: \n\n```\nEjecutar(\n    Dibujar(\n        Combinar(\n            Triangulo,\n            Combinar(\n                Cuadrado,\n                Circulo\n            )\n        )\n    )\n)\n```\n\nVeamos el modelo de sustituci\xf3n:\n\n<blockquote>\n    <p align="center">\n        <img src="https://i.ibb.co/X2Lpwbv/diagrama-2.png" alt="diagrama-2" border="0">\n    </p>\n</blockquote>\n\n','\nTambi\xe9n podemos expandir este concepto usando el procedimiento de Colorear a uno de los par\xe1metros:\n\n```\nEjecutar(\n    Dibujar(\n        Combinar(\n            Triangulo,\n            Combinar(\n                Cuadrado,\n                Colorear(Circulo, Verde)\n            )\n        )\n    )\n)\n```\n\nY por \xfaltimo veamos el modelo de sustituci\xf3n de este c\xf3digo:\n\n<blockquote>\n    <p align="center">\n        <img src="https://i.ibb.co/yFcMQVm/diagrama-3.png" alt="diagrama-3" border="0">\n    </p>\n</blockquote>\n\n',"\n## Contexto\n\nVamos a explorar el concepto de 'Contexto'. Hasta ahora vemos que tenemos ciertos procedimientos y primitivos definidos. \xbfDe donde salen?\n\nCada lenguaje de programaci\xf3n nos brinda un 'contexto', el cual nos aporta definiciones previas que usamos para componer nuestros programas.\n\nEn este caso el contexto es el que nos aporta Ejecutar, Combinar, Dibujar y al mismo tiempo nos aporta los primitivos como circulo o Verde.\n\n\xbfQue pasar\xeda si queremos usar el contexto para aportar nuestras propias definiciones dentro de nuestro programa?\n",'\n## Medios de Abstracci\xf3n.\n\nSupongamos que yo defino una forma, y la quiero reutilizar m\xe1s adelante en mi programa. Para eso tenemos un nuevo procedimiento llamado ```Definir```\n```\nEjecutar(\n    Definir("MiForma", Combinar(Circulo, Triangulo)),\n    Dibujar(MiForma)\n)\n```\n\nEn este programa estamos utilizando varios par\xe1metros dentro de ```Ejecutar```. Es importante recordar que cada par\xe1metro que pasamos dentro de ```Ejecutar``` es una declaraci\xf3n.\n\nAdem\xe1s estamos usando este nuevo procedimiento: ```Definir```.\n',"\nEste procedimiento recibe un par\xe1metro con un primitivo nuevo que ser\xeda una 'cadena de texto', la cual va siempre entre comillas dobles \"\". \n\nMediante una cadena de texto le asignamos un nombre a nuestra definici\xf3n ```MiForma```, y como segundo par\xe1metro le pasamos el procedimiento ```Combinar```.\n\nLuego nosotros llamamos al procedimiento ```Dibujar``` y este hace referencia a ```MiForma```, el cual es conocido por nuestro programa porque en la declaraci\xf3n anterior la definimos usando el procedimiento ```Definir```.\n\nDefinir recibe siempre como primer par\xe1metro una cadena de texto, y como segundo par\xe1metro puede recibir cualquier otro primitivo.\n\nPodemos usar ```Definir``` para abstraer ciertas formas y reutilizarlas en las declaraciones siguientes.\n\nDefinir es lo que se conoce como ```Medios de Abstracci\xf3n``` Que son la \xfaltima base fundamental de los lenguajes de programaci\xf3n que vamos a ver en este tutorial.\nLos medios de abstracci\xf3n nos permite generar una abstracci\xf3n agregandola al contexto para poder reutilizar esa abstracci\xf3n en las declaraciones siguientes del programa.\nSi nosotros quisieramos llamar a ```MiForma``` antes de definirla, el programa fallar\xeda, porque a\xfan no es conocida por el contexto de este lenguaje, por eso es importante respetar el orden.\n","\n## Cierre\nA modo repaso, comenzamos aprendiendo que es un procedimiento, que rol cumplen los datos en los procedimientos, y que es una declaraci\xf3n.\nEn el tutorial fuimos explorando el lenguaje y tambi\xe9n aprendimos las 3 bases fundamentales de cualquier lenguaje de programaci\xf3n, que siempre tienen que resonar a la hora de aprender\ncualquier otro lenguaje de programaci\xf3n:\n\n- \xbfCuales son los primitivos?\n- \xbfCuales son los medios de combinaci\xf3n?\n- \xbfCuales son los medios de abstracci\xf3n?\n\nTambi\xe9n es importante siempre pensar en el contexto de ejecuci\xf3n de cada programa, y entender el rol que cumple el orden de ejecuci\xf3n de cada declaraci\xf3n.\n\nEn algunos lenguajes estos conceptos pueden variar en su nombre, pero en si aparecen los mismos conceptos en cada lenguaje de programaci\xf3n.\n\nAhora prueben practicar y generar distintas imagenes en la grilla.\n\nSi les copa compartan en sus comentarios en elsalon alguna selecci\xf3n de capturas de las im\xe1genes generadas por ustedes con este lenguaje.\n"];function ie(){var e=Object(s.a)(["\n    color: ",";\n    font-size: 1.5rem;\n    margin: 1rem;\n"]);return ie=function(){return e},e}function ce(){var e=Object(s.a)(["\n    color: ",";\n    font-size: 1.2rem;\n    margin: 0rem;\n"]);return ce=function(){return e},e}function se(){var e=Object(s.a)(["\n    width: 100%;\n    height: 4vh;\n    box-sizing: border-box;\n    background: ",";\n    border-top: solid "," 0.1rem;\n"]);return se=function(){return e},e}function le(){var e=Object(s.a)(["\n    width: 100%;\n    height: 41.5vh;\n    background: ",";\n    overflow-y: auto;\n    color: ",";\n    font-size: 1.5rem;\n"]);return le=function(){return e},e}var ue=m.b.div(le(),d,"#99FF"),me=m.b.div(se(),d,"#99FF"),de=m.b.h3(ce(),"#99FF"),pe=(m.b.p(ie(),"#99FF"),function(e){var n=r.a.useState(0),a=Object(c.a)(n,2),o=a[0],t=a[1],i=r.a.useRef();return r.a.createElement(l.a,{container:!0},r.a.createElement(l.a,{xs:12},r.a.createElement(ue,{ref:i},r.a.createElement(re.a,{escapeHtml:!1,source:te[o]}))),r.a.createElement(l.a,{xs:12},r.a.createElement(me,null,r.a.createElement(l.a,{container:!0,justify:"space-around",alignItems:"center"},r.a.createElement(l.a,{item:!0},r.a.createElement(g,{onClick:function(){t(Math.max(0,o-1)),i.current.scrollTop=0},style:{margin:"0.5rem"}},"<<")),r.a.createElement(l.a,{item:!0},r.a.createElement(de,{style:{margin:"0.5rem"}},o+1,"/",te.length)),r.a.createElement(l.a,{item:!0},r.a.createElement(g,{onClick:function(){t(Math.min(te.length-1,o+1)),i.current.scrollTop=0},style:{margin:"0.5rem"}},">>"))))))});function ge(){var e=Object(s.a)(["\n    ","\n    margin: 1.5%;\n    width: 97%;\n    height: 100%;\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n"]);return ge=function(){return e},e}var fe=m.b.div(ge(),q),be=function(){var e=r.a.useState(""),n=Object(c.a)(e,2),a=n[0],o=n[1],t=r.a.useState([]),i=Object(c.a)(t,2),s=i[0],u=i[1],m=r.a.useState(!0),d=Object(c.a)(m,2),p=d[0],g=d[1];return r.a.createElement(r.a.Fragment,null,r.a.createElement(K,null),r.a.createElement(l.a,{container:!0,direction:"row",justify:"center",spacing:1},r.a.createElement(l.a,{item:!0,xs:12,sm:6},r.a.createElement(l.a,{container:!0,justify:"center"},r.a.createElement(l.a,{item:!0,xs:12,style:{height:"48vh"}},r.a.createElement(fe,null,r.a.createElement(h,{isSuccess:g,setCode:u,setConsoleContent:o,setRenderer:Q.setRenderer,run:Q.run}))),r.a.createElement(l.a,{item:!0,xs:12,style:{height:"48vh"}},r.a.createElement(fe,null,r.a.createElement(pe,null))))),r.a.createElement(l.a,{item:!0,xs:12,sm:6},r.a.createElement(l.a,{container:!0,justify:"center"},r.a.createElement(l.a,{item:!0,xs:12,style:{height:"68vh"}},r.a.createElement(fe,null,r.a.createElement(ae,{code:s}))),r.a.createElement(l.a,{item:!0,xs:12,style:{height:"28vh"}},r.a.createElement(w,{content:a,success:p}))))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(407),a(198),a(455);i.a.render(r.a.createElement(r.a.StrictMode,null,r.a.createElement(be,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[259,1,2]]]);
//# sourceMappingURL=main.d3aa8328.chunk.js.map